#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace phpDocumentor\Guides;

use Symfony\Component\Console\Input\ArgvInput;
use phpDocumentor\Guides\Cli\Application;
use phpDocumentor\Guides\Cli\DependencyInjection\ApplicationExtension;
use phpDocumentor\Guides\Cli\DependencyInjection\ContainerFactory;

$vendorDir = dirname(__DIR__) . '/../../vendor';
$autoloadDirectory = $vendorDir . '/autoload.php';
if (file_exists($autoloadDirectory)){
    require_once $autoloadDirectory;
} else {
    // Search for autoload.php
    if (($rootPath = getcwd()) === false) {
        throw new \RuntimeException("Error while determining the current directory.", 1636451407);
    }

    $vendorDir = __DIR__ . '/vendor';
    while (!file_exists($vendorDir . '/autoload.php')) {
        if ($vendorDir === $rootPath) {
            throw new \RuntimeException("Could not find autoload.php", 1636451408);
        }
        $vendorDir = \dirname($vendorDir);
    }
    require $vendorDir . '/autoload.php';
}

$input = new ArgvInput();

$containerFactory = new ContainerFactory([new ApplicationExtension()]);

// TODO: How to use $output at this point for coloured output and access
//       $output->isVerbose() / $output->isDebug()?
if (is_file($vendorDir . '/../guides.xml')) {
    echo "DEBUG: Using vendorDir guides.xml file ($vendorDir/../guides.xml)\n";
    // vendor folder was placed directly into the project directory
    $containerFactory->addConfigFile($vendorDir . '/../guides.xml');
}

$workingDir = $input->getParameterOption('--working-dir', getcwd(), true);
$configDir = $input->getParameterOption('--config', $workingDir, true);

echo "DEBUG: workingDir set to " . $workingDir;
echo "DEBUG: configDir set to " . $configDir;

if (is_file($configDir . '/guides.xml')) {
    echo "DEBUG: Using configDir guides.xml file ($configDir/guides.xml)\n";
    $containerFactory->addConfigFile($configDir . '/guides.xml');
}
$container = $containerFactory->create($vendorDir);

/** @var Application $application */
$application = $container->get(Application::class);
$application->run();
