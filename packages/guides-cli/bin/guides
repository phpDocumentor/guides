#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace phpDocumentor\Guides;

use Symfony\Component\Console\Input\ArgvInput;
use phpDocumentor\Guides\Cli\Application;
use phpDocumentor\Guides\Cli\DependencyInjection\ApplicationExtension;
use phpDocumentor\Guides\Cli\DependencyInjection\ContainerFactory;

$vendorDir = dirname(__DIR__) . '/../../vendor';
$autoloadDirectory = $vendorDir . '/autoload.php';
if (file_exists($autoloadDirectory)){
    require_once $autoloadDirectory;
} else {
    // Search for autoload.php
    if (($rootPath = getcwd()) === false) {
        throw new \RuntimeException("Error while determining the current directory.", 1636451407);
    }

    $vendorDirParent = __DIR__;
    while (!file_exists($vendorDirParent . '/vendor/autoload.php')) {
        if ($vendorDirParent === $rootPath) {
            throw new \RuntimeException("Could not find autoload.php", 1636451408);
        }
        $vendorDirParent = \dirname($vendorDirParent);
    }
    $vendorDir = $vendorDirParent . '/vendor';
    require $vendorDir . '/autoload.php';
}

$input = new ArgvInput();
$verbosity = (int) getenv('SHELL_VERBOSITY');
if ($input->hasParameterOption('-vvv', true)) {
    $verbosity = 3;
}

$containerFactory = new ContainerFactory([new ApplicationExtension()]);

$projectConfig = $vendorDir . '/../guides.xml';
if (is_file($projectConfig)) {
    $projectConfig = realpath($vendorDir . '/../guides.xml');
    if ($verbosity === 3) {
        echo 'Loading guides.xml from ' . $projectConfig . PHP_EOL;
    }
    // vendor folder was placed directly into the project directory
    if ($projectConfig) {
        $containerFactory->addConfigFile($projectConfig);
    }
}

$workingDir = $input->getParameterOption(['--working-dir', '-w'], getcwd(), true);
$localConfig = $input->getParameterOption(['--config', '-c'], $workingDir, true) . '/guides.xml';

if (is_file($localConfig) && realpath($localConfig) !== $projectConfig) {
    if ($verbosity === 3) {
        echo 'Loading guides.xml from ' . $localConfig . PHP_EOL;
    }

    $containerFactory->addConfigFile($localConfig);
}
$container = $containerFactory->create($vendorDir);

/** @var Application $application */
$application = $container->get(Application::class);
$application->run();
